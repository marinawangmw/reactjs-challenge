{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { Filter, SET_FILTER, SET_NAME, SET_TYPE, CLEAR_INPUT, CLEAR_COLLECTION, CLEAR_ERROR, SET_TOTAL_PAGES, SET_CURRENT_PAGE, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, GET_COLLECTION_ERROR } from './reduxTypes';\nimport { useQuery } from 'react-apollo';\n// GraphQL Queries\nconst GET_CHARACTERS_QUERY = `\n    query($name:String,$type:String, $page:Int) {\n        characters(page:$page,filter:{name:$name, type:$type}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                type\n                species\n                gender\n                image\n            }\n        }\n    }\n`;\nconst GET_LOCATIONS_QUERY = `\n    query($name:String,$type:String, $page:Int) {\n        locations(page:$page,filter:{name:$name, type:$type}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                dimension\n                residents{\n                    name\n                    image\n                }\n            }\n        }\n    }\n`;\nconst GET_EPISODES_QUERY = `\n    query($name:String, $page:Int) {\n        episodes(page:$page,filter:{name:$name}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                air_date\n                episode\n                characters{\n                name\n                image\n                }\n            }\n        }\n    }\n`; // STATES\n\nconst initialData = {\n  filterQuery: '',\n  filter: '',\n  collection: [],\n  inputType: '',\n  inputName: '',\n  fetching: false,\n  error: false,\n  page: 1,\n  totalPages: 0\n}; // REDUCER\n\nconst reducer = (state = initialData, action) => {\n  switch (action.type) {\n    case SET_FILTER:\n      return { ...state,\n        ...action.payload\n      };\n\n    case SET_NAME:\n      return { ...state,\n        name: action.payload\n      };\n\n    case SET_TYPE:\n      return { ...state,\n        tipo: action.payload\n      };\n\n    case CLEAR_INPUT:\n      return { ...state,\n        tipo: '',\n        name: ''\n      };\n\n    case CLEAR_COLLECTION:\n      return { ...state,\n        collection: [],\n        totalPages: 0,\n        page: 1\n      };\n\n    case CLEAR_ERROR:\n      return { ...state,\n        error: ''\n      };\n\n    case SET_TOTAL_PAGES:\n      return { ...state,\n        totalPages: action.payload\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case GET_COLLECTION_PENDING:\n      return { ...state,\n        fetching: true\n      };\n\n    case GET_COLLECTION_SUCCESS:\n      return { ...state,\n        fetching: false,\n        collection: action.payload\n      };\n\n    case GET_COLLECTION_ERROR:\n      return { ...state,\n        fetching: false,\n        error: action.payload\n      };\n\n    default:\n      return action;\n  }\n}; // ACTIONS\n\n\nexport const setFilterCharactersAction = () => (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.Characters,\n      filterQuery: GET_CHARACTERS_QUERY\n    }\n  });\n  console.log(getState().filterQuery);\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setFilterLocationsAction = () => (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.Locations,\n      filterQuery: GET_LOCATIONS_QUERY\n    }\n  });\n  console.log(getState().filterQuery);\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setFilterEpisodesAction = () => (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.Episodes,\n      filterQuery: GET_EPISODES_QUERY\n    }\n  });\n  console.log(getState().filterQuery);\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setInputNameAction = inputName => (dispatch, getState) => {\n  dispatch({\n    type: SET_NAME,\n    payload: inputName\n  });\n};\nexport const setInputTypeAction = inputType => (dispatch, getState) => {\n  dispatch({\n    type: SET_TYPE,\n    payload: inputType\n  });\n};\nexport const clearInputAction = () => (dispatch, getState) => {\n  dispatch({\n    type: CLEAR_INPUT\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearCollectionAction = () => (dispatch, getState) => {\n  dispatch({\n    type: CLEAR_COLLECTION\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => (dispatch, getState) => {\n  dispatch({\n    type: CLEAR_ERROR\n  });\n};\nexport const setPageAction = page => (dispatch, getState) => {\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: page\n  });\n  dispatch(getCollectionAction());\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    filterQuery,\n    filter,\n    page,\n    inputName,\n    inputType\n  } = getState();\n  dispatch(clearCollectionAction()); // manda la query a la api y obtiene los datos\n\n  const query = gql`${filterQuery}`;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(query, {\n    variables: {\n      name: inputName.toLowerCase(),\n      type: inputType.toLowerCase(),\n      page: page\n    }\n  });\n\n  if (loading) {\n    dispatch({\n      type: GET_COLLECTION_PENDING\n    });\n  }\n\n  if (error || !data) {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: true\n    });\n    return;\n  }\n\n  console.log(data, typeof data);\n  dispatch({\n    type: GET_COLLECTION_SUCCESS,\n    payload: data[filter].results\n  });\n  dispatch({\n    type: SET_TOTAL_PAGES,\n    payload: data[filter].info.pages\n  });\n};\nexport default reducer;","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcherDuck.ts"],"names":["gql","Filter","SET_FILTER","SET_NAME","SET_TYPE","CLEAR_INPUT","CLEAR_COLLECTION","CLEAR_ERROR","SET_TOTAL_PAGES","SET_CURRENT_PAGE","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","GET_COLLECTION_ERROR","useQuery","GET_CHARACTERS_QUERY","GET_LOCATIONS_QUERY","GET_EPISODES_QUERY","initialData","filterQuery","filter","collection","inputType","inputName","fetching","error","page","totalPages","reducer","state","action","type","payload","name","tipo","setFilterCharactersAction","dispatch","getState","Characters","console","log","clearInputAction","clearCollectionAction","setFilterLocationsAction","Locations","setFilterEpisodesAction","Episodes","setInputNameAction","setInputTypeAction","clearErrorAction","setPageAction","getCollectionAction","query","loading","data","variables","toLowerCase","results","info","pages"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost';\r\nimport { ActionCreator, Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { \r\n    Filter, SearcherState, ApiResultData,\r\n    SET_FILTER, SET_NAME, SET_TYPE, CLEAR_INPUT, CLEAR_COLLECTION, CLEAR_ERROR, SET_TOTAL_PAGES, SET_CURRENT_PAGE, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, GET_COLLECTION_ERROR,\r\n    SearcherActionTypes, QueryVars\r\n} from './reduxTypes';\r\nimport { useQuery } from 'react-apollo';\r\n\r\nexport type AppThunk = ActionCreator<\r\n    ThunkAction<void, SearcherState, null, Action<string>>\r\n>;\r\n\r\n// GraphQL Queries\r\nconst GET_CHARACTERS_QUERY = `\r\n    query($name:String,$type:String, $page:Int) {\r\n        characters(page:$page,filter:{name:$name, type:$type}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                type\r\n                species\r\n                gender\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_LOCATIONS_QUERY = `\r\n    query($name:String,$type:String, $page:Int) {\r\n        locations(page:$page,filter:{name:$name, type:$type}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                dimension\r\n                residents{\r\n                    name\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_EPISODES_QUERY = `\r\n    query($name:String, $page:Int) {\r\n        episodes(page:$page,filter:{name:$name}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                air_date\r\n                episode\r\n                characters{\r\n                name\r\n                image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// STATES\r\nconst initialData = {\r\n    filterQuery: '',\r\n    filter: '', \r\n    collection: [],\r\n    inputType: '',\r\n    inputName: '',\r\n    fetching: false,\r\n    error:false,\r\n    page: 1,\r\n    totalPages: 0\r\n}\r\n\r\n// REDUCER\r\nconst reducer = ( state=initialData, action: SearcherActionTypes ) => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return {...state, ...action.payload }\r\n        case SET_NAME:\r\n            return { ...state, name: action.payload}\r\n        case SET_TYPE:\r\n            return { ...state, tipo: action.payload}\r\n        case CLEAR_INPUT:\r\n            return {...state, tipo:'', name:''}\r\n        case CLEAR_COLLECTION:\r\n            return {...state, collection:[], totalPages:0, page:1 }\r\n        case CLEAR_ERROR:\r\n            return {...state, error:''}\r\n        case SET_TOTAL_PAGES:\r\n            return {...state, totalPages: action.payload}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, page: action.payload}\r\n        case GET_COLLECTION_PENDING:\r\n            return {...state, fetching: true}\r\n        case GET_COLLECTION_SUCCESS:\r\n            return { ...state, fetching: false, collection: action.payload }\r\n        case GET_COLLECTION_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        default:\r\n            return action\r\n    }\r\n}\r\n \r\n// ACTIONS\r\nexport const setFilterCharactersAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.Characters, filterQuery: GET_CHARACTERS_QUERY }\r\n    })\r\n    console.log(getState().filterQuery)\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setFilterLocationsAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.Locations, filterQuery: GET_LOCATIONS_QUERY }\r\n    })\r\n    console.log(getState().filterQuery)\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setFilterEpisodesAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.Episodes, filterQuery: GET_EPISODES_QUERY }\r\n    })\r\n    console.log(getState().filterQuery)\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setInputNameAction: AppThunk = (inputName:string) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_NAME,\r\n        payload: inputName\r\n    })\r\n} \r\n\r\nexport const setInputTypeAction: AppThunk = (inputType:string) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_TYPE,\r\n        payload: inputType\r\n    })\r\n} \r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CLEAR_INPUT\r\n    })\r\n    dispatch(clearErrorAction());\r\n}\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CLEAR_COLLECTION\r\n    })\r\n    dispatch(clearErrorAction());\r\n}\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CLEAR_ERROR\r\n    })\r\n}\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_CURRENT_PAGE,\r\n        payload: page\r\n    })\r\n    dispatch(getCollectionAction());\r\n}\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n    const { filterQuery, filter, page, inputName, inputType } = getState();\r\n    dispatch(clearCollectionAction());\r\n    // manda la query a la api y obtiene los datos\r\n    const query = gql`${filterQuery}`\r\n    const { loading, error, data } = useQuery<ApiResultData,QueryVars>(\r\n        query, \r\n        {  variables: {\r\n                name: inputName.toLowerCase(), \r\n                type: inputType.toLowerCase(), \r\n                page: page }\r\n        }    \r\n    )\r\n\r\n    if(loading) {\r\n        dispatch({\r\n            type: GET_COLLECTION_PENDING,\r\n        })\r\n    }\r\n\r\n    if(error || !data) {\r\n        dispatch({\r\n            type: GET_COLLECTION_ERROR,\r\n            payload: true\r\n        })\r\n        return\r\n    }\r\n\r\n    console.log(data, typeof data)\r\n    \r\n    dispatch({\r\n        type: GET_COLLECTION_SUCCESS,\r\n        payload: data[filter].results\r\n    })\r\n\r\n    dispatch({\r\n        type: SET_TOTAL_PAGES,\r\n        payload: data[filter].info.pages\r\n    })\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}