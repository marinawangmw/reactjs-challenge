{"ast":null,"code":"import ApolloClient, { gql } from 'apollo-boost';\nimport { Filter, SET_FILTER, SET_NAME, SET_TYPE, CLEAR_INPUT, CLEAR_COLLECTION, CLEAR_ERROR, SET_TOTAL_PAGES, SET_CURRENT_PAGE, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, GET_COLLECTION_ERROR } from './reduxTypes';\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n}); // GraphQL Queries\n\nconst GET_CHARACTERS_QUERY = `\n    query($name:String,$type:String, $page:Int) {\n        characters(page:$page,filter:{name:$name, type:$type}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                type\n                species\n                gender\n                image\n            }\n        }\n    }\n`;\nconst GET_LOCATIONS_QUERY = `\n    query($name:String,$type:String, $page:Int) {\n        locations(page:$page,filter:{name:$name, type:$type}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                dimension\n                residents{\n                    name\n                    image\n                }\n            }\n        }\n    }\n`;\nconst GET_EPISODES_QUERY = `\n    query($name:String, $page:Int) {\n        episodes(page:$page,filter:{name:$name}){\n            info{\n                pages\n            }\n            results{\n                id\n                name\n                air_date\n                episode\n                characters{\n                name\n                image\n                }\n            }\n        }\n    }\n`; // STATES\n\nconst initialData = {\n  filterQuery: '',\n  filter: '',\n  collection: [],\n  inputType: '',\n  inputName: '',\n  fetching: false,\n  error: false,\n  page: 1,\n  totalPages: 0\n}; // REDUCER\n\nconst reducer = (state = initialData, action) => {\n  switch (action.type) {\n    case SET_FILTER:\n      return { ...state,\n        ...action.payload\n      };\n\n    case SET_NAME:\n      return { ...state,\n        inputName: action.payload\n      };\n\n    case SET_TYPE:\n      return { ...state,\n        inputType: action.payload\n      };\n\n    case CLEAR_INPUT:\n      return { ...state,\n        inputType: '',\n        inputName: ''\n      };\n\n    case CLEAR_COLLECTION:\n      return { ...state,\n        collection: [],\n        totalPages: 0,\n        page: 1\n      };\n\n    case CLEAR_ERROR:\n      return { ...state,\n        error: false\n      };\n\n    case SET_TOTAL_PAGES:\n      return { ...state,\n        totalPages: action.payload\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case GET_COLLECTION_PENDING:\n      return { ...state,\n        fetching: true\n      };\n\n    case GET_COLLECTION_SUCCESS:\n      return { ...state,\n        fetching: false,\n        collection: action.payload\n      };\n\n    case GET_COLLECTION_ERROR:\n      return { ...state,\n        fetching: false,\n        error: action.payload\n      };\n\n    default:\n      return action;\n  }\n}; // ACTIONS\n\n\nexport const setFilterCharactersAction = () => dispatch => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.characters,\n      filterQuery: GET_CHARACTERS_QUERY\n    }\n  });\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setFilterLocationsAction = () => dispatch => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.locations,\n      filterQuery: GET_LOCATIONS_QUERY\n    }\n  });\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setFilterEpisodesAction = () => dispatch => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: Filter.episodes,\n      filterQuery: GET_EPISODES_QUERY\n    }\n  });\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n};\nexport const setInputNameAction = inputName => dispatch => {\n  dispatch({\n    type: SET_NAME,\n    payload: inputName\n  });\n};\nexport const setInputTypeAction = inputType => dispatch => {\n  dispatch({\n    type: SET_TYPE,\n    payload: inputType\n  });\n};\nexport const clearInputAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_INPUT\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearCollectionAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_COLLECTION\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERROR\n  });\n};\nexport const setPageAction = page => dispatch => {\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: page\n  });\n  dispatch(getCollectionAction());\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    filterQuery,\n    filter,\n    page,\n    inputName,\n    inputType\n  } = getState().searcher;\n  console.log(getState().searcher);\n  dispatch(clearCollectionAction()); // manda la query a la api y obtiene los datos\n\n  const query = gql`${filterQuery}`;\n  dispatch({\n    type: GET_COLLECTION_PENDING\n  });\n  return client.query({\n    query,\n    variables: {\n      name: inputName.toLowerCase(),\n      type: inputType.toLowerCase(),\n      page: page\n    }\n  }).then(({\n    data\n  }) => {\n    // if(error){\n    //     dispatch({\n    //         type: GET_COLLECTION_ERROR,\n    //         payload: error\n    //     })\n    //     return\n    // }\n    // dispatch({\n    //     type: GET_COLLECTION_SUCCESS,\n    //     payload: data[filter].results\n    // })\n    // dispatch({\n    //     type: SET_TOTAL_PAGES,\n    //     payload: data[filter].info.pages\n    // })\n    console.log(data['characters']);\n  }).catch(error => {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: error\n    });\n  }); // const { loading, error, data } = useQuery<ApiResultData,QueryVars>(\n  //     query, \n  //     {  variables: {\n  //             name: inputName!.toLowerCase(), \n  //             type: inputType!.toLowerCase(), \n  //             page: page! }\n  //     }    \n  // )\n  // if(loading) {\n  //     dispatch({\n  //         type: GET_COLLECTION_PENDING,\n  //     })\n  // }\n  // if(error || !data) {\n  //     dispatch({\n  //         type: GET_COLLECTION_ERROR,\n  //         payload: true\n  //     })\n  //     return\n  // }\n  // console.log(data)\n  // dispatch({\n  //     type: GET_COLLECTION_SUCCESS,\n  //     payload: data[filter].results\n  // })\n  // dispatch({\n  //     type: SET_TOTAL_PAGES,\n  //     payload: data[filter].info.pages\n  // })\n};\nexport default reducer;","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcherDuck.ts"],"names":["ApolloClient","gql","Filter","SET_FILTER","SET_NAME","SET_TYPE","CLEAR_INPUT","CLEAR_COLLECTION","CLEAR_ERROR","SET_TOTAL_PAGES","SET_CURRENT_PAGE","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","GET_COLLECTION_ERROR","client","uri","GET_CHARACTERS_QUERY","GET_LOCATIONS_QUERY","GET_EPISODES_QUERY","initialData","filterQuery","filter","collection","inputType","inputName","fetching","error","page","totalPages","reducer","state","action","type","payload","setFilterCharactersAction","dispatch","characters","clearInputAction","clearCollectionAction","setFilterLocationsAction","locations","setFilterEpisodesAction","episodes","setInputNameAction","setInputTypeAction","clearErrorAction","setPageAction","getCollectionAction","getState","searcher","console","log","query","variables","name","toLowerCase","then","data","catch"],"mappings":"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","sourcesContent":["import ApolloClient, { gql } from 'apollo-boost';\r\nimport { \r\n    Filter, AppThunk, ApiResultData,\r\n    SET_FILTER, SET_NAME, SET_TYPE, CLEAR_INPUT, CLEAR_COLLECTION, CLEAR_ERROR, SET_TOTAL_PAGES, SET_CURRENT_PAGE, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, GET_COLLECTION_ERROR,\r\n    SearcherActionTypes, QueryVars, SearcherState\r\n} from './reduxTypes';\r\nimport { useQuery } from 'react-apollo';\r\nimport { Reducer } from 'redux';\r\n\r\nlet client = new ApolloClient({\r\n    uri: \"https://rickandmortyapi.com/graphql\"\r\n})\r\n\r\n// GraphQL Queries\r\nconst GET_CHARACTERS_QUERY = `\r\n    query($name:String,$type:String, $page:Int) {\r\n        characters(page:$page,filter:{name:$name, type:$type}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                type\r\n                species\r\n                gender\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_LOCATIONS_QUERY = `\r\n    query($name:String,$type:String, $page:Int) {\r\n        locations(page:$page,filter:{name:$name, type:$type}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                dimension\r\n                residents{\r\n                    name\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_EPISODES_QUERY = `\r\n    query($name:String, $page:Int) {\r\n        episodes(page:$page,filter:{name:$name}){\r\n            info{\r\n                pages\r\n            }\r\n            results{\r\n                id\r\n                name\r\n                air_date\r\n                episode\r\n                characters{\r\n                name\r\n                image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n// STATES\r\nconst initialData = {\r\n    filterQuery: '',\r\n    filter: '', \r\n    collection: [],\r\n    inputType: '',\r\n    inputName: '',\r\n    fetching: false,\r\n    error:false,\r\n    page: 1,\r\n    totalPages: 0\r\n}\r\n\r\n// REDUCER\r\nconst reducer:Reducer<SearcherState> = ( state=initialData, action: SearcherActionTypes )  => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return {...state, ...action.payload }\r\n        case SET_NAME:\r\n            return { ...state, inputName: action.payload}\r\n        case SET_TYPE:\r\n            return { ...state, inputType: action.payload}\r\n        case CLEAR_INPUT:\r\n            return {...state, inputType:'', inputName:''}\r\n        case CLEAR_COLLECTION:\r\n            return {...state, collection:[], totalPages:0, page:1 }\r\n        case CLEAR_ERROR:\r\n            return {...state, error:false}\r\n        case SET_TOTAL_PAGES:\r\n            return {...state, totalPages: action.payload}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, page: action.payload}\r\n        case GET_COLLECTION_PENDING:\r\n            return {...state, fetching: true}\r\n        case GET_COLLECTION_SUCCESS:\r\n            return { ...state, fetching: false, collection: action.payload }\r\n        case GET_COLLECTION_ERROR:\r\n            return { ...state, fetching: false, error: action.payload }\r\n        default:\r\n            return action\r\n    }\r\n}\r\n \r\n// ACTIONS\r\nexport const setFilterCharactersAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.characters, filterQuery: GET_CHARACTERS_QUERY }\r\n    })\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setFilterLocationsAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.locations, filterQuery: GET_LOCATIONS_QUERY }\r\n    })\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setFilterEpisodesAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: SET_FILTER,\r\n        payload: { filter: Filter.episodes, filterQuery: GET_EPISODES_QUERY }\r\n    })\r\n    dispatch(clearInputAction());\r\n    dispatch(clearCollectionAction());\r\n}\r\n\r\nexport const setInputNameAction: AppThunk = (inputName:string) => (dispatch) => {\r\n    dispatch({\r\n        type: SET_NAME,\r\n        payload: inputName\r\n    })\r\n} \r\n\r\nexport const setInputTypeAction: AppThunk = (inputType:string) => (dispatch) => {\r\n    dispatch({\r\n        type: SET_TYPE,\r\n        payload: inputType\r\n    })\r\n} \r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_INPUT\r\n    })\r\n    dispatch(clearErrorAction());\r\n}\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_COLLECTION\r\n    })\r\n    dispatch(clearErrorAction());\r\n}\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERROR\r\n    })\r\n}\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (dispatch) => {\r\n    dispatch({\r\n        type: SET_CURRENT_PAGE,\r\n        payload: page\r\n    })\r\n    dispatch(getCollectionAction());\r\n}\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n    const { filterQuery, filter, page, inputName, inputType } = getState().searcher;\r\n    console.log(getState().searcher);\r\n    dispatch(clearCollectionAction());\r\n    // manda la query a la api y obtiene los datos\r\n    const query = gql`${filterQuery}`\r\n\r\n    dispatch({\r\n        type: GET_COLLECTION_PENDING,\r\n    })\r\n\r\n    return client.query({\r\n        query,\r\n        variables: { name:inputName!.toLowerCase(), type:inputType!.toLowerCase(), page:page }\r\n    })\r\n        .then(({ data }) => {\r\n            // if(error){\r\n            //     dispatch({\r\n            //         type: GET_COLLECTION_ERROR,\r\n            //         payload: error\r\n            //     })\r\n            //     return\r\n            // }\r\n\r\n            // dispatch({\r\n            //     type: GET_COLLECTION_SUCCESS,\r\n            //     payload: data[filter].results\r\n            // })\r\n\r\n            // dispatch({\r\n            //     type: SET_TOTAL_PAGES,\r\n            //     payload: data[filter].info.pages\r\n            // })\r\n            console.log(data['characters'])\r\n\r\n        }).catch(error => {\r\n            dispatch({\r\n                type: GET_COLLECTION_ERROR,\r\n                payload: error\r\n            })\r\n        })\r\n\r\n    // const { loading, error, data } = useQuery<ApiResultData,QueryVars>(\r\n    //     query, \r\n    //     {  variables: {\r\n    //             name: inputName!.toLowerCase(), \r\n    //             type: inputType!.toLowerCase(), \r\n    //             page: page! }\r\n    //     }    \r\n    // )\r\n\r\n    // if(loading) {\r\n    //     dispatch({\r\n    //         type: GET_COLLECTION_PENDING,\r\n    //     })\r\n    // }\r\n\r\n    // if(error || !data) {\r\n    //     dispatch({\r\n    //         type: GET_COLLECTION_ERROR,\r\n    //         payload: true\r\n    //     })\r\n    //     return\r\n    // }\r\n\r\n    // console.log(data)\r\n    // dispatch({\r\n    //     type: GET_COLLECTION_SUCCESS,\r\n    //     payload: data[filter].results\r\n    // })\r\n\r\n    // dispatch({\r\n    //     type: SET_TOTAL_PAGES,\r\n    //     payload: data[filter].info.pages\r\n    // })\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}