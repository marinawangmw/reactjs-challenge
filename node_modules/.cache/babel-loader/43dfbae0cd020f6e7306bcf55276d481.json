{"ast":null,"code":"import ApolloClient, { gql } from \"apollo-boost\";\nimport { CLEAR_COLLECTION, CLEAR_ERROR, CLEAR_INPUT, Filter, GET_COLLECTION_ERROR, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, SET_CURRENT_PAGE, SET_FILTER, SET_NAME, SET_TOTAL_PAGES, SET_TYPE } from \"./reduxTypes\";\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n}); // GraphQL Queries\n\nconst queries = {\n  [Filter.characters]: `\n        query($name:String,$type:String, $page:Int) {\n            characters(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    type\n                    species\n                    gender\n                    image\n                }\n            }\n        }`,\n  [Filter.locations]: `\n        query($name:String,$type:String, $page:Int) {\n            locations(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    dimension\n                    residents{\n                        name\n                        image\n                    }\n                }\n            }\n        }`,\n  [Filter.episodes]: `\n        query($name:String, $page:Int) {\n            episodes(page:$page,filter:{name:$name}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    air_date\n                    episode\n                    characters{\n                    name\n                    image\n                    }\n                }\n            }\n        }`\n}; // STATES\n\nconst initialData = {\n  filterQuery: \"\",\n  filter: Filter.characters,\n  collection: {\n    [Filter.characters]: [],\n    [Filter.locations]: [],\n    [Filter.episodes]: []\n  },\n  inputType: \"\",\n  inputName: \"\",\n  fetching: false,\n  error: false,\n  page: 1,\n  totalPages: 0\n}; // REDUCER\n\nconst reducer = (state = initialData, action) => {\n  switch (action.type) {\n    case SET_FILTER:\n      return { ...state,\n        ...action.payload\n      };\n\n    case SET_NAME:\n      return { ...state,\n        inputName: action.payload\n      };\n\n    case SET_TYPE:\n      return { ...state,\n        inputType: action.payload\n      };\n\n    case CLEAR_INPUT:\n      return { ...state,\n        inputType: \"\",\n        inputName: \"\"\n      };\n\n    case CLEAR_COLLECTION:\n      return { ...state,\n        collection: [],\n        totalPages: 0\n      };\n\n    case CLEAR_ERROR:\n      return { ...state,\n        error: false\n      };\n\n    case SET_TOTAL_PAGES:\n      return { ...state,\n        totalPages: action.payload\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case GET_COLLECTION_PENDING:\n      return { ...state,\n        fetching: true\n      };\n\n    case GET_COLLECTION_SUCCESS:\n      return { ...state,\n        fetching: false,\n        collection: action.payload\n      };\n\n    case GET_COLLECTION_ERROR:\n      return { ...state,\n        fetching: false,\n        error: action.payload\n      };\n\n    default:\n      return action;\n  }\n}; // ACTIONS\n\n\nexport const setFilterAction = filterType => dispatch => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: filterType,\n      filterQuery: queries[filterType]\n    }\n  });\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n  dispatch(setPageAction(1));\n};\nexport const setInputNameAction = inputName => dispatch => {\n  dispatch({\n    type: SET_NAME,\n    payload: inputName\n  });\n};\nexport const setInputTypeAction = inputType => dispatch => {\n  dispatch({\n    type: SET_TYPE,\n    payload: inputType\n  });\n};\nexport const clearInputAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_INPUT\n  });\n};\nexport const clearCollectionAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_COLLECTION\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERROR\n  });\n};\nexport const setPageAction = page => dispatch => {\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: page\n  });\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    filterQuery,\n    filter,\n    page,\n    inputName,\n    inputType,\n    collection\n  } = getState().searcher;\n  dispatch(clearCollectionAction());\n  const query = gql`\n\t\t${filterQuery}\n\t`;\n  dispatch({\n    type: GET_COLLECTION_PENDING\n  });\n  return client.query({\n    query,\n    variables: {\n      name: inputName.toLowerCase(),\n      type: inputType.toLowerCase(),\n      page: page\n    }\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: GET_COLLECTION_SUCCESS,\n      payload: {\n        collection: {\n          filter: data[filter].results\n        }\n      }\n    });\n    dispatch({\n      type: SET_TOTAL_PAGES,\n      payload: data[filter].info.pages\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: error\n    });\n  });\n};\nexport default reducer;","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcherDuck.ts"],"names":["ApolloClient","gql","CLEAR_COLLECTION","CLEAR_ERROR","CLEAR_INPUT","Filter","GET_COLLECTION_ERROR","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","SET_CURRENT_PAGE","SET_FILTER","SET_NAME","SET_TOTAL_PAGES","SET_TYPE","client","uri","queries","characters","locations","episodes","initialData","filterQuery","filter","collection","inputType","inputName","fetching","error","page","totalPages","reducer","state","action","type","payload","setFilterAction","filterType","dispatch","clearInputAction","clearCollectionAction","setPageAction","setInputNameAction","setInputTypeAction","clearErrorAction","getCollectionAction","getState","searcher","query","variables","name","toLowerCase","then","data","results","info","pages","catch"],"mappings":"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","sourcesContent":["import ApolloClient, { gql } from \"apollo-boost\";\r\nimport { Reducer } from \"redux\";\r\nimport {\r\n\tAppThunk,\r\n\tCLEAR_COLLECTION,\r\n\tCLEAR_ERROR,\r\n\tCLEAR_INPUT,\r\n\tFilter,\r\n\tGET_COLLECTION_ERROR,\r\n\tGET_COLLECTION_PENDING,\r\n\tGET_COLLECTION_SUCCESS,\r\n\tSearcherActionTypes,\r\n\tSearcherState,\r\n\tSET_CURRENT_PAGE,\r\n\tSET_FILTER,\r\n\tSET_NAME,\r\n\tSET_TOTAL_PAGES,\r\n\tSET_TYPE,\r\n} from \"./reduxTypes\";\r\n\r\nlet client = new ApolloClient({\r\n\turi: \"https://rickandmortyapi.com/graphql\",\r\n});\r\n\r\n// GraphQL Queries\r\nconst queries = {\r\n\t[Filter.characters]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            characters(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    type\r\n                    species\r\n                    gender\r\n                    image\r\n                }\r\n            }\r\n        }`,\r\n\r\n\t[Filter.locations]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            locations(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    dimension\r\n                    residents{\r\n                        name\r\n                        image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n\r\n\t[Filter.episodes]: `\r\n        query($name:String, $page:Int) {\r\n            episodes(page:$page,filter:{name:$name}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    air_date\r\n                    episode\r\n                    characters{\r\n                    name\r\n                    image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n};\r\n\r\n// STATES\r\nconst initialData: SearcherState = {\r\n\tfilterQuery: \"\",\r\n\tfilter: Filter.characters,\r\n\tcollection: {\r\n\t\t[Filter.characters]: [],\r\n\t\t[Filter.locations]: [],\r\n\t\t[Filter.episodes]: [],\r\n\t},\r\n\tinputType: \"\",\r\n\tinputName: \"\",\r\n\tfetching: false,\r\n\terror: false,\r\n\tpage: 1,\r\n\ttotalPages: 0,\r\n};\r\n\r\n// REDUCER\r\nconst reducer: Reducer<SearcherState> = (\r\n\tstate = initialData,\r\n\taction: SearcherActionTypes\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_FILTER:\r\n\t\t\treturn { ...state, ...action.payload };\r\n\t\tcase SET_NAME:\r\n\t\t\treturn { ...state, inputName: action.payload };\r\n\t\tcase SET_TYPE:\r\n\t\t\treturn { ...state, inputType: action.payload };\r\n\t\tcase CLEAR_INPUT:\r\n\t\t\treturn { ...state, inputType: \"\", inputName: \"\" };\r\n\t\tcase CLEAR_COLLECTION:\r\n\t\t\treturn { ...state, collection: [], totalPages: 0 };\r\n\t\tcase CLEAR_ERROR:\r\n\t\t\treturn { ...state, error: false };\r\n\t\tcase SET_TOTAL_PAGES:\r\n\t\t\treturn { ...state, totalPages: action.payload };\r\n\t\tcase SET_CURRENT_PAGE:\r\n\t\t\treturn { ...state, page: action.payload };\r\n\t\tcase GET_COLLECTION_PENDING:\r\n\t\t\treturn { ...state, fetching: true };\r\n\t\tcase GET_COLLECTION_SUCCESS:\r\n\t\t\treturn { ...state, fetching: false, collection: action.payload };\r\n\t\tcase GET_COLLECTION_ERROR:\r\n\t\t\treturn { ...state, fetching: false, error: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn action;\r\n\t}\r\n};\r\n\r\n// ACTIONS\r\nexport const setFilterAction: AppThunk = (filterType: Filter) => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: SET_FILTER,\r\n\t\tpayload: {\r\n\t\t\tfilter: filterType,\r\n\t\t\tfilterQuery: queries[filterType as keyof typeof queries],\r\n\t\t},\r\n\t});\r\n\r\n\tdispatch(clearInputAction());\r\n\r\n\tdispatch(clearCollectionAction());\r\n\r\n\tdispatch(setPageAction(1));\r\n};\r\n\r\nexport const setInputNameAction: AppThunk = (inputName: string) => (\r\n\tdispatch\r\n) => {\r\n\tdispatch({\r\n\t\ttype: SET_NAME,\r\n\t\tpayload: inputName,\r\n\t});\r\n};\r\n\r\nexport const setInputTypeAction: AppThunk = (inputType: string) => (\r\n\tdispatch\r\n) => {\r\n\tdispatch({\r\n\t\ttype: SET_TYPE,\r\n\t\tpayload: inputType,\r\n\t});\r\n};\r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CLEAR_INPUT,\r\n\t});\r\n};\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CLEAR_COLLECTION,\r\n\t});\r\n\r\n\tdispatch(clearErrorAction());\r\n};\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: CLEAR_ERROR,\r\n\t});\r\n};\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: SET_CURRENT_PAGE,\r\n\t\tpayload: page,\r\n\t});\r\n};\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst {\r\n\t\tfilterQuery,\r\n\t\tfilter,\r\n\t\tpage,\r\n\t\tinputName,\r\n\t\tinputType,\r\n\t\tcollection,\r\n\t} = getState().searcher;\r\n\r\n\tdispatch(clearCollectionAction());\r\n\r\n\tconst query = gql`\r\n\t\t${filterQuery}\r\n\t`;\r\n\r\n\tdispatch({\r\n\t\ttype: GET_COLLECTION_PENDING,\r\n\t});\r\n\r\n\treturn client\r\n\t\t.query({\r\n\t\t\tquery,\r\n\t\t\tvariables: {\r\n\t\t\t\tname: inputName!.toLowerCase(),\r\n\t\t\t\ttype: inputType!.toLowerCase(),\r\n\t\t\t\tpage: page,\r\n\t\t\t},\r\n\t\t})\r\n\t\t.then(({ data }) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_SUCCESS,\r\n\t\t\t\tpayload: { collection: { filter: data[filter!].results } },\r\n\t\t\t});\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: SET_TOTAL_PAGES,\r\n\t\t\t\tpayload: data[filter!].info.pages,\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_ERROR,\r\n\t\t\t\tpayload: error,\r\n\t\t\t});\r\n\t\t});\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}