{"ast":null,"code":"// STATE TYPES\nexport let Filter;\n\n(function (Filter) {\n  Filter[\"Characters\"] = \"characters\";\n  Filter[\"Locations\"] = \"locations\";\n  Filter[\"Episodes\"] = \"episodes\";\n})(Filter || (Filter = {}));\n\n// CONSTANTS\nexport const SET_FILTER = 'SET_FILTER';\nexport const SET_NAME = 'SET_NAME';\nexport const SET_TYPE = 'SET_TYPE';\nexport const CLEAR_INPUT = 'CLEAR_INPUT';\nexport const CLEAR_COLLECTION = 'CLEAR_COLLECTION';\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\nexport const SET_TOTAL_PAGES = 'SET_TOTAL_PAGES';\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nexport const GET_COLLECTION_PENDING = \"GET_COLLECTION_PENDING\";\nexport const GET_COLLECTION_SUCCESS = \"GET_COLLECTION_SUCCESS\";\nexport const GET_COLLECTION_ERROR = \"GET_COLLECTION_ERROR\"; // ACTIONS TYPE","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/reduxTypes.ts"],"names":["Filter","SET_FILTER","SET_NAME","SET_TYPE","CLEAR_INPUT","CLEAR_COLLECTION","CLEAR_ERROR","SET_TOTAL_PAGES","SET_CURRENT_PAGE","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","GET_COLLECTION_ERROR"],"mappings":"AAGA;AACA,WAAYA,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AAwCZ;AACA,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAEP","sourcesContent":["import { ActionCreator, Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\n// STATE TYPES\r\nexport enum Filter { \r\n    Characters = 'characters', \r\n    Locations = 'locations', \r\n    Episodes = 'episodes' \r\n}\r\n\r\nexport type ApiResultData = {\r\n    [key in 'characters' | 'locations' | 'episodes']: {\r\n        info: { pages: number };\r\n        results: ResultData[];\r\n        } \r\n}\r\n\r\nexport interface ResultData {\r\n    id?: number;\r\n    name: string;\r\n    type?: string;\r\n    species?: string;\r\n    gender?: string;\r\n    image?: string;\r\n    dimension?: string;\r\n    episode?: string;\r\n    air_date?: Date;\r\n    residents?: { name:string, image:string }[];\r\n    characters?: { name:string, image:string }[];\r\n}\r\n\r\nexport interface SearcherState {\r\n    filterQuery: string;\r\n    filter: Filter;\r\n    collection: ResultData[];\r\n    inputType: string;\r\n    inputName: string;\r\n    fetching: boolean;\r\n    error: boolean;\r\n    page: number;\r\n    totalPages: number;\r\n    searcher?: string;\r\n}\r\n\r\n// CONSTANTS\r\nexport const SET_FILTER = 'SET_FILTER';\r\nexport const SET_NAME = 'SET_NAME';\r\nexport const SET_TYPE = 'SET_TYPE';\r\nexport const CLEAR_INPUT = 'CLEAR_INPUT';\r\nexport const CLEAR_COLLECTION = 'CLEAR_COLLECTION';\r\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\r\nexport const SET_TOTAL_PAGES = 'SET_TOTAL_PAGES';\r\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nexport const GET_COLLECTION_PENDING = \"GET_COLLECTION_PENDING\";\r\nexport const GET_COLLECTION_SUCCESS = \"GET_COLLECTION_SUCCESS\";\r\nexport const GET_COLLECTION_ERROR = \"GET_COLLECTION_ERROR\";\r\n\r\n// ACTIONS TYPE\r\ninterface SetFilterAction {\r\n    type: typeof SET_FILTER\r\n    payload: { filter: Filter, filterQuery: string }\r\n}\r\n\r\ninterface SetInputAction {\r\n    type: typeof SET_NAME | typeof SET_TYPE\r\n    payload: string\r\n}\r\n\r\ninterface ClearStateAction {\r\n    type: typeof CLEAR_INPUT | typeof CLEAR_COLLECTION | typeof CLEAR_ERROR \r\n}\r\n\r\ninterface PaginatorAction {\r\n    type: typeof SET_TOTAL_PAGES | typeof SET_CURRENT_PAGE\r\n    payload: number\r\n}\r\n\r\ninterface GetDataAction {\r\n    type: typeof GET_COLLECTION_SUCCESS | typeof GET_COLLECTION_PENDING | typeof GET_COLLECTION_ERROR\r\n    payload: ApiResultData | boolean\r\n}\r\n\r\nexport type SearcherActionTypes = SetFilterAction | SetInputAction | ClearStateAction | PaginatorAction | GetDataAction\r\n\r\n// GraphQL QUERY VARIABLES\r\nexport interface QueryVars {\r\n    name: string;\r\n    type: string;\r\n    page: number;\r\n}\r\n\r\nexport type AppThunk = ActionCreator<\r\n    ThunkAction<void, SearcherState, null, Action<string>>\r\n>;"]},"metadata":{},"sourceType":"module"}