{"ast":null,"code":"import ApolloClient, { gql } from \"apollo-boost\";\nimport { CLEAR_COLLECTION, CLEAR_ERROR, CLEAR_INPUT, Filter, GET_COLLECTION_ERROR, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, SET_CURRENT_PAGE, SET_FILTER, SET_NAME, SET_TOTAL_PAGES, SET_TYPE } from \"./reduxTypes\";\nlet client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n}); // GraphQL Queries\n\nconst queries = {\n  [Filter.characters]: `\n        query($name:String,$type:String, $page:Int) {\n            characters(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    type\n                    species\n                    gender\n                    image\n                }\n            }\n        }`,\n  [Filter.locations]: `\n        query($name:String,$type:String, $page:Int) {\n            locations(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    dimension\n                    residents{\n                        name\n                        image\n                    }\n                }\n            }\n        }`,\n  [Filter.episodes]: `\n        query($name:String, $page:Int) {\n            episodes(page:$page,filter:{name:$name}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    air_date\n                    episode\n                    characters{\n                    name\n                    image\n                    }\n                }\n            }\n        }`\n}; // STATES\n\nconst initialFilterState = {\n  collection: [],\n  inputType: \"\",\n  inputName: \"\",\n  fetching: false,\n  error: false,\n  page: 1,\n  totalPages: 0\n};\nconst initialData = {\n  activeFilter: Filter.characters,\n  [Filter.characters]: { ...initialFilterState,\n    filterQuery: queries.characters\n  },\n  [Filter.locations]: { ...initialFilterState,\n    filterQuery: queries.locations\n  },\n  [Filter.episodes]: { ...initialFilterState,\n    filterQuery: queries.episodes\n  }\n}; // REDUCER\n\nconst reducer = (state = initialData, action) => {\n  switch (action.type) {\n    case SET_FILTER:\n    case SET_NAME:\n    case SET_TYPE:\n    case CLEAR_INPUT:\n    case CLEAR_COLLECTION:\n    case CLEAR_ERROR:\n    case SET_TOTAL_PAGES:\n    case SET_CURRENT_PAGE:\n    case GET_COLLECTION_PENDING:\n    case GET_COLLECTION_SUCCESS:\n    case GET_COLLECTION_ERROR:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return action;\n  }\n}; // ACTIONS\n\n\nexport const setFilterAction = filter => (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      activeFilter: filter,\n      [filter]: { ...[filter],\n        filterQuery: queries[filter]\n      }\n    }\n  });\n};\nexport const setInputNameAction = inputName => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: SET_NAME,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        inputName\n      }\n    }\n  });\n};\nexport const setInputTypeAction = inputType => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: SET_TYPE,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        inputType\n      }\n    }\n  });\n};\nexport const clearInputAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: CLEAR_INPUT,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        inputName: \"\",\n        inputType: \"\"\n      }\n    }\n  });\n};\nexport const clearCollectionAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: CLEAR_COLLECTION,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        collection: []\n      }\n    }\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: CLEAR_ERROR,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        error: false,\n        fetching: false\n      }\n    }\n  });\n};\nexport const setPageAction = page => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const activeFilterState = getState().searcher[activeFilter];\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: {\n      [activeFilter]: { ...activeFilterState,\n        page\n      }\n    }\n  });\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const {\n    filterQuery,\n    page,\n    inputName,\n    inputType\n  } = getState().searcher[activeFilter]; //const activeFilterState = getState().searcher[activeFilter];\n\n  const query = gql`\n\t\t${filterQuery}\n\t`;\n  dispatch({\n    type: GET_COLLECTION_PENDING,\n    payload: {\n      [activeFilter]: { ...[activeFilter],\n        fetching: true\n      }\n    }\n  });\n  return client.query({\n    query,\n    variables: {\n      name: inputName.toLowerCase(),\n      type: inputType.toLowerCase(),\n      page: page\n    }\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: GET_COLLECTION_SUCCESS,\n      payload: {\n        [activeFilter]: { ...[activeFilter],\n          fetching: false,\n          collection: data[activeFilter].results\n        }\n      }\n    });\n    dispatch({\n      type: SET_TOTAL_PAGES,\n      payload: {\n        [activeFilter]: { ...[activeFilter],\n          fetching: false,\n          totalPages: data[activeFilter].info.pages\n        }\n      }\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: {\n        [activeFilter]: { ...[activeFilter],\n          error: true\n        }\n      }\n    });\n  });\n};\nexport default reducer;","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcherDuck.ts"],"names":["ApolloClient","gql","CLEAR_COLLECTION","CLEAR_ERROR","CLEAR_INPUT","Filter","GET_COLLECTION_ERROR","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","SET_CURRENT_PAGE","SET_FILTER","SET_NAME","SET_TOTAL_PAGES","SET_TYPE","client","uri","queries","characters","locations","episodes","initialFilterState","collection","inputType","inputName","fetching","error","page","totalPages","initialData","activeFilter","filterQuery","reducer","state","action","type","payload","setFilterAction","filter","dispatch","getState","setInputNameAction","searcher","activeFilterState","setInputTypeAction","clearInputAction","clearCollectionAction","clearErrorAction","setPageAction","getCollectionAction","query","variables","name","toLowerCase","then","data","results","info","pages","catch"],"mappings":"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","sourcesContent":["import ApolloClient, { gql } from \"apollo-boost\";\r\nimport { Reducer } from \"redux\";\r\nimport {\r\n\tAppThunk,\r\n\tCLEAR_COLLECTION,\r\n\tCLEAR_ERROR,\r\n\tCLEAR_INPUT,\r\n\tFilter,\r\n\tFilterState,\r\n\tGET_COLLECTION_ERROR,\r\n\tGET_COLLECTION_PENDING,\r\n\tGET_COLLECTION_SUCCESS,\r\n\tSearcherState,\r\n\tSET_CURRENT_PAGE,\r\n\tSET_FILTER,\r\n\tSET_NAME,\r\n\tSET_TOTAL_PAGES,\r\n\tSET_TYPE,\r\n} from \"./reduxTypes\";\r\n\r\nlet client = new ApolloClient({\r\n\turi: \"https://rickandmortyapi.com/graphql\",\r\n});\r\n\r\n// GraphQL Queries\r\nconst queries = {\r\n\t[Filter.characters]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            characters(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    type\r\n                    species\r\n                    gender\r\n                    image\r\n                }\r\n            }\r\n        }`,\r\n\r\n\t[Filter.locations]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            locations(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    dimension\r\n                    residents{\r\n                        name\r\n                        image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n\r\n\t[Filter.episodes]: `\r\n        query($name:String, $page:Int) {\r\n            episodes(page:$page,filter:{name:$name}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    air_date\r\n                    episode\r\n                    characters{\r\n                    name\r\n                    image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n};\r\n\r\n// STATES\r\nconst initialFilterState: FilterState = {\r\n\tcollection: [],\r\n\tinputType: \"\",\r\n\tinputName: \"\",\r\n\tfetching: false,\r\n\terror: false,\r\n\tpage: 1,\r\n\ttotalPages: 0,\r\n};\r\n\r\nconst initialData: SearcherState = {\r\n\tactiveFilter: Filter.characters,\r\n\t[Filter.characters]: {\r\n\t\t...initialFilterState,\r\n\t\tfilterQuery: queries.characters,\r\n\t},\r\n\t[Filter.locations]: {\r\n\t\t...initialFilterState,\r\n\t\tfilterQuery: queries.locations,\r\n\t},\r\n\t[Filter.episodes]: {\r\n\t\t...initialFilterState,\r\n\t\tfilterQuery: queries.episodes,\r\n\t},\r\n};\r\n\r\n// REDUCER\r\nconst reducer: Reducer<SearcherState> = (state = initialData, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SET_FILTER:\r\n\t\tcase SET_NAME:\r\n\t\tcase SET_TYPE:\r\n\t\tcase CLEAR_INPUT:\r\n\t\tcase CLEAR_COLLECTION:\r\n\t\tcase CLEAR_ERROR:\r\n\t\tcase SET_TOTAL_PAGES:\r\n\t\tcase SET_CURRENT_PAGE:\r\n\t\tcase GET_COLLECTION_PENDING:\r\n\t\tcase GET_COLLECTION_SUCCESS:\r\n\t\tcase GET_COLLECTION_ERROR:\r\n\t\t\treturn { ...state, ...action.payload };\r\n\t\tdefault:\r\n\t\t\treturn action;\r\n\t}\r\n};\r\n\r\n// ACTIONS\r\nexport const setFilterAction: AppThunk = (filter: Filter) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tdispatch({\r\n\t\ttype: SET_FILTER,\r\n\t\tpayload: {\r\n\t\t\tactiveFilter: filter,\r\n\t\t\t[filter]: {\r\n\t\t\t\t...[filter],\r\n\t\t\t\tfilterQuery: queries[filter],\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setInputNameAction: AppThunk = (inputName: string) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: SET_NAME,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\tinputName,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setInputTypeAction: AppThunk = (inputType: string) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: SET_TYPE,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\tinputType,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: CLEAR_INPUT,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\tinputName: \"\",\r\n\t\t\t\tinputType: \"\",\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: CLEAR_COLLECTION,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\tcollection: [],\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n\r\n\tdispatch(clearErrorAction());\r\n};\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: CLEAR_ERROR,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\terror: false,\r\n\t\t\t\tfetching: false,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst activeFilterState = getState().searcher[activeFilter];\r\n\tdispatch({\r\n\t\ttype: SET_CURRENT_PAGE,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...activeFilterState,\r\n\t\t\t\tpage,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst { filterQuery, page, inputName, inputType } = getState().searcher[\r\n\t\tactiveFilter\r\n\t];\r\n\t//const activeFilterState = getState().searcher[activeFilter];\r\n\r\n\tconst query = gql`\r\n\t\t${filterQuery}\r\n\t`;\r\n\r\n\tdispatch({\r\n\t\ttype: GET_COLLECTION_PENDING,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...[activeFilter],\r\n\t\t\t\tfetching: true,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n\r\n\treturn client\r\n\t\t.query({\r\n\t\t\tquery,\r\n\t\t\tvariables: {\r\n\t\t\t\tname: inputName!.toLowerCase(),\r\n\t\t\t\ttype: inputType!.toLowerCase(),\r\n\t\t\t\tpage: page,\r\n\t\t\t},\r\n\t\t})\r\n\t\t.then(({ data }) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_SUCCESS,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t[activeFilter]: {\r\n\t\t\t\t\t\t...[activeFilter],\r\n\t\t\t\t\t\tfetching: false,\r\n\t\t\t\t\t\tcollection: data[activeFilter!].results,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: SET_TOTAL_PAGES,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t[activeFilter]: {\r\n\t\t\t\t\t\t...[activeFilter],\r\n\t\t\t\t\t\tfetching: false,\r\n\t\t\t\t\t\ttotalPages: data[activeFilter!].info.pages,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_ERROR,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t[activeFilter]: {\r\n\t\t\t\t\t\t...[activeFilter],\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}