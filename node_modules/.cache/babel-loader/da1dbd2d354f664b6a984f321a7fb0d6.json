{"ast":null,"code":"import ApolloClient, { gql } from 'apollo-boost';\nimport { CLEAR_COLLECTION, CLEAR_ERROR, CLEAR_INPUT, Filter, GET_COLLECTION_ERROR, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, SET_CURRENT_PAGE, SET_FILTER, SET_NAME, SET_TOTAL_PAGES, SET_TYPE } from './reduxTypes';\nlet client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql'\n}); // GraphQL Queries\n\nconst queries = {\n  [Filter.characters]: `\n        query($name:String,$type:String, $page:Int) {\n            characters(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    type\n                    species\n                    gender\n                    image\n                }\n            }\n        }`,\n  [Filter.locations]: `\n        query($name:String,$type:String, $page:Int) {\n            locations(page:$page,filter:{name:$name, type:$type}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    dimension\n                    residents{\n                        name\n                        image\n                    }\n                }\n            }\n        }`,\n  [Filter.episodes]: `\n        query($name:String, $page:Int) {\n            episodes(page:$page,filter:{name:$name}){\n                info{\n                    pages\n                }\n                results{\n                    id\n                    name\n                    air_date\n                    episode\n                    characters{\n                    name\n                    image\n                    }\n                }\n            }\n        }`\n}; // STATES\n\nconst initialData = {\n  filterQuery: '',\n  filter: Filter.characters,\n  collection: [],\n  inputType: '',\n  inputName: '',\n  fetching: false,\n  error: false,\n  page: 1,\n  totalPages: 0\n}; // REDUCER\n\nconst reducer = (state = initialData, action) => {\n  switch (action.type) {\n    case SET_FILTER:\n      return { ...state,\n        ...action.payload\n      };\n\n    case SET_NAME:\n      return { ...state,\n        inputName: action.payload\n      };\n\n    case SET_TYPE:\n      return { ...state,\n        inputType: action.payload\n      };\n\n    case CLEAR_INPUT:\n      return { ...state,\n        inputType: '',\n        inputName: ''\n      };\n\n    case CLEAR_COLLECTION:\n      return { ...state,\n        collection: [],\n        totalPages: 0\n      };\n\n    case CLEAR_ERROR:\n      return { ...state,\n        error: false\n      };\n\n    case SET_TOTAL_PAGES:\n      return { ...state,\n        totalPages: action.payload\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case GET_COLLECTION_PENDING:\n      return { ...state,\n        fetching: true\n      };\n\n    case GET_COLLECTION_SUCCESS:\n      return { ...state,\n        fetching: false,\n        collection: action.payload\n      };\n\n    case GET_COLLECTION_ERROR:\n      return { ...state,\n        fetching: false,\n        error: action.payload\n      };\n\n    default:\n      return action;\n  }\n}; // ACTIONS\n\n\nexport const setFilterAction = filterType => dispatch => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      filter: filterType,\n      filterQuery: queries[filterType]\n    }\n  });\n  dispatch(clearInputAction());\n  dispatch(clearCollectionAction());\n  dispatch(setPageAction(1));\n};\nexport const setInputNameAction = inputName => dispatch => {\n  dispatch({\n    type: SET_NAME,\n    payload: inputName\n  });\n};\nexport const setInputTypeAction = inputType => dispatch => {\n  dispatch({\n    type: SET_TYPE,\n    payload: inputType\n  });\n};\nexport const clearInputAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_INPUT\n  });\n};\nexport const clearCollectionAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_COLLECTION\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERROR\n  });\n};\nexport const setPageAction = page => dispatch => {\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: page\n  });\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    filterQuery,\n    filter,\n    page,\n    inputName,\n    inputType\n  } = getState().searcher;\n  dispatch(clearCollectionAction());\n  const query = gql`\n    ${filterQuery}\n  `;\n  dispatch({\n    type: GET_COLLECTION_PENDING\n  });\n  return client.query({\n    query,\n    variables: {\n      name: inputName.toLowerCase(),\n      type: inputType.toLowerCase(),\n      page: page\n    }\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: GET_COLLECTION_SUCCESS,\n      payload: data[filter].results\n    });\n    dispatch({\n      type: SET_TOTAL_PAGES,\n      payload: data[filter].info.pages\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: error\n    });\n  });\n};\nexport default reducer;","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcherDuck.ts"],"names":["ApolloClient","gql","CLEAR_COLLECTION","CLEAR_ERROR","CLEAR_INPUT","Filter","GET_COLLECTION_ERROR","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","SET_CURRENT_PAGE","SET_FILTER","SET_NAME","SET_TOTAL_PAGES","SET_TYPE","client","uri","queries","characters","locations","episodes","initialData","filterQuery","filter","collection","inputType","inputName","fetching","error","page","totalPages","reducer","state","action","type","payload","setFilterAction","filterType","dispatch","clearInputAction","clearCollectionAction","setPageAction","setInputNameAction","setInputTypeAction","clearErrorAction","getCollectionAction","getState","searcher","query","variables","name","toLowerCase","then","data","results","info","pages","catch"],"mappings":"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","sourcesContent":["import ApolloClient, { gql } from 'apollo-boost';\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AppThunk,\r\n  CLEAR_COLLECTION,\r\n  CLEAR_ERROR,\r\n  CLEAR_INPUT,\r\n  Filter,\r\n  GET_COLLECTION_ERROR,\r\n  GET_COLLECTION_PENDING,\r\n  GET_COLLECTION_SUCCESS,\r\n  SearcherActionTypes,\r\n  SearcherState,\r\n  SET_CURRENT_PAGE,\r\n  SET_FILTER,\r\n  SET_NAME,\r\n  SET_TOTAL_PAGES,\r\n  SET_TYPE,\r\n} from './reduxTypes';\r\n\r\nlet client = new ApolloClient({\r\n  uri: 'https://rickandmortyapi.com/graphql',\r\n});\r\n\r\n// GraphQL Queries\r\nconst queries = {\r\n  [Filter.characters]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            characters(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    type\r\n                    species\r\n                    gender\r\n                    image\r\n                }\r\n            }\r\n        }`,\r\n\r\n  [Filter.locations]: `\r\n        query($name:String,$type:String, $page:Int) {\r\n            locations(page:$page,filter:{name:$name, type:$type}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    dimension\r\n                    residents{\r\n                        name\r\n                        image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n\r\n  [Filter.episodes]: `\r\n        query($name:String, $page:Int) {\r\n            episodes(page:$page,filter:{name:$name}){\r\n                info{\r\n                    pages\r\n                }\r\n                results{\r\n                    id\r\n                    name\r\n                    air_date\r\n                    episode\r\n                    characters{\r\n                    name\r\n                    image\r\n                    }\r\n                }\r\n            }\r\n        }`,\r\n};\r\n\r\n// STATES\r\nconst initialData = {\r\n  filterQuery: '',\r\n  filter: Filter.characters,\r\n  collection: [],\r\n  inputType: '',\r\n  inputName: '',\r\n  fetching: false,\r\n  error: false,\r\n  page: 1,\r\n  totalPages: 0,\r\n};\r\n\r\n// REDUCER\r\nconst reducer: Reducer<SearcherState> = (\r\n  state = initialData,\r\n  action: SearcherActionTypes\r\n) => {\r\n  switch (action.type) {\r\n    case SET_FILTER:\r\n      return { ...state, ...action.payload };\r\n    case SET_NAME:\r\n      return { ...state, inputName: action.payload };\r\n    case SET_TYPE:\r\n      return { ...state, inputType: action.payload };\r\n    case CLEAR_INPUT:\r\n      return { ...state, inputType: '', inputName: '' };\r\n    case CLEAR_COLLECTION:\r\n      return { ...state, collection: [], totalPages: 0 };\r\n    case CLEAR_ERROR:\r\n      return { ...state, error: false };\r\n    case SET_TOTAL_PAGES:\r\n      return { ...state, totalPages: action.payload };\r\n    case SET_CURRENT_PAGE:\r\n      return { ...state, page: action.payload };\r\n    case GET_COLLECTION_PENDING:\r\n      return { ...state, fetching: true };\r\n    case GET_COLLECTION_SUCCESS:\r\n      return { ...state, fetching: false, collection: action.payload };\r\n    case GET_COLLECTION_ERROR:\r\n      return { ...state, fetching: false, error: action.payload };\r\n    default:\r\n      return action;\r\n  }\r\n};\r\n\r\n// ACTIONS\r\nexport const setFilterAction: AppThunk = (filterType: Filter) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_FILTER,\r\n    payload: {\r\n      filter: filterType,\r\n      filterQuery: queries[filterType as keyof typeof queries],\r\n    },\r\n  });\r\n\r\n  dispatch(clearInputAction());\r\n\r\n  dispatch(clearCollectionAction());\r\n\r\n  dispatch(setPageAction(1));\r\n};\r\n\r\nexport const setInputNameAction: AppThunk = (inputName: string) => (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: SET_NAME,\r\n    payload: inputName,\r\n  });\r\n};\r\n\r\nexport const setInputTypeAction: AppThunk = (inputType: string) => (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: SET_TYPE,\r\n    payload: inputType,\r\n  });\r\n};\r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_INPUT,\r\n  });\r\n};\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_COLLECTION,\r\n  });\r\n\r\n  dispatch(clearErrorAction());\r\n};\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_ERROR,\r\n  });\r\n};\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CURRENT_PAGE,\r\n    payload: page,\r\n  });\r\n};\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n  const {\r\n    filterQuery,\r\n    filter,\r\n    page,\r\n    inputName,\r\n    inputType,\r\n  } = getState().searcher;\r\n\r\n  dispatch(clearCollectionAction());\r\n\r\n  const query = gql`\r\n    ${filterQuery}\r\n  `;\r\n\r\n  dispatch({\r\n    type: GET_COLLECTION_PENDING,\r\n  });\r\n\r\n  return client\r\n    .query({\r\n      query,\r\n      variables: {\r\n        name: inputName!.toLowerCase(),\r\n        type: inputType!.toLowerCase(),\r\n        page: page,\r\n      },\r\n    })\r\n    .then(({ data }) => {\r\n      dispatch({\r\n        type: GET_COLLECTION_SUCCESS,\r\n        payload: data[filter!].results,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_TOTAL_PAGES,\r\n        payload: data[filter!].info.pages,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: GET_COLLECTION_ERROR,\r\n        payload: error,\r\n      });\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}