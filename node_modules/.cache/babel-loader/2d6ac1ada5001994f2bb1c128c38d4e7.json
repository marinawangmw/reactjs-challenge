{"ast":null,"code":"import { gql } from \"apollo-boost\";\nimport { client, queries } from \"../../services/apollo\";\nimport { CLEAR_COLLECTION, CLEAR_ERROR, CLEAR_INPUT, GET_COLLECTION_ERROR, GET_COLLECTION_PENDING, GET_COLLECTION_SUCCESS, SET_CURRENT_PAGE, SET_FILTER, SET_NAME, SET_TOTAL_PAGES, SET_TYPE } from \"./searcher.types\";\nexport const setFilterAction = filter => (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER,\n    payload: {\n      activeFilter: filter,\n      [filter]: { ...getState().searcher[filter],\n        filterQuery: queries[filter]\n      }\n    }\n  });\n};\nexport const setInputNameAction = inputName => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: SET_NAME,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        inputName\n      }\n    }\n  });\n};\nexport const setInputTypeAction = inputType => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: SET_TYPE,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        inputType\n      }\n    }\n  });\n};\nexport const clearInputAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: CLEAR_INPUT,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        inputName: \"\",\n        inputType: \"\"\n      }\n    }\n  });\n};\nexport const clearCollectionAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: CLEAR_COLLECTION,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        collection: []\n      }\n    }\n  });\n  dispatch(clearErrorAction());\n};\nexport const clearErrorAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: CLEAR_ERROR,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        error: false,\n        fetching: false\n      }\n    }\n  });\n};\nexport const setPageAction = page => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: SET_CURRENT_PAGE,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        page\n      }\n    }\n  });\n};\nexport const setTotalPagesAction = pages => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  dispatch({\n    type: SET_TOTAL_PAGES,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        fetching: false,\n        totalPages: pages\n      }\n    }\n  });\n};\nexport const getCollectionAction = () => (dispatch, getState) => {\n  const {\n    activeFilter\n  } = getState().searcher;\n  const {\n    filterQuery,\n    page,\n    inputName,\n    inputType\n  } = getState().searcher[activeFilter];\n  const query = gql`\n\t\t${filterQuery}\n\t`;\n  dispatch({\n    type: GET_COLLECTION_PENDING,\n    payload: {\n      [activeFilter]: { ...getState().searcher[activeFilter],\n        fetching: true\n      }\n    }\n  });\n  return client.query({\n    query,\n    variables: {\n      name: inputName ? inputName.toLowerCase() : \"\",\n      type: inputType ? inputType.toLowerCase() : \"\",\n      page: page ? page : 1\n    }\n  }).then(({\n    data\n  }) => {\n    dispatch({\n      type: GET_COLLECTION_SUCCESS,\n      payload: {\n        [activeFilter]: { ...getState().searcher[activeFilter],\n          fetching: false,\n          collection: data[activeFilter].results\n        }\n      }\n    });\n    dispatch(setTotalPagesAction(data[activeFilter].info.pages));\n  }).catch(error => {\n    dispatch({\n      type: GET_COLLECTION_ERROR,\n      payload: {\n        [activeFilter]: { ...getState().searcher[activeFilter],\n          error: true\n        }\n      }\n    });\n  });\n};","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/searcher/searcher.actions.ts"],"names":["gql","client","queries","CLEAR_COLLECTION","CLEAR_ERROR","CLEAR_INPUT","GET_COLLECTION_ERROR","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","SET_CURRENT_PAGE","SET_FILTER","SET_NAME","SET_TOTAL_PAGES","SET_TYPE","setFilterAction","filter","dispatch","getState","type","payload","activeFilter","searcher","filterQuery","setInputNameAction","inputName","setInputTypeAction","inputType","clearInputAction","clearCollectionAction","collection","clearErrorAction","error","fetching","setPageAction","page","setTotalPagesAction","pages","totalPages","getCollectionAction","query","variables","name","toLowerCase","then","data","results","info","catch"],"mappings":"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","sourcesContent":["import { gql } from \"apollo-boost\";\r\nimport { client, queries } from \"../../services/apollo\";\r\nimport {\r\n\tAppThunk,\r\n\tCLEAR_COLLECTION,\r\n\tCLEAR_ERROR,\r\n\tCLEAR_INPUT,\r\n\tFilter,\r\n\tGET_COLLECTION_ERROR,\r\n\tGET_COLLECTION_PENDING,\r\n\tGET_COLLECTION_SUCCESS,\r\n\tSET_CURRENT_PAGE,\r\n\tSET_FILTER,\r\n\tSET_NAME,\r\n\tSET_TOTAL_PAGES,\r\n\tSET_TYPE,\r\n} from \"./searcher.types\";\r\n\r\nexport const setFilterAction: AppThunk = (filter: Filter) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tdispatch({\r\n\t\ttype: SET_FILTER,\r\n\t\tpayload: {\r\n\t\t\tactiveFilter: filter,\r\n\t\t\t[filter]: {\r\n\t\t\t\t...getState().searcher[filter],\r\n\t\t\t\tfilterQuery: queries[filter],\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setInputNameAction: AppThunk = (inputName: string) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: SET_NAME,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tinputName,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setInputTypeAction: AppThunk = (inputType: string) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: SET_TYPE,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tinputType,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const clearInputAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: CLEAR_INPUT,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tinputName: \"\",\r\n\t\t\t\tinputType: \"\",\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const clearCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: CLEAR_COLLECTION,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tcollection: [],\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n\r\n\tdispatch(clearErrorAction());\r\n};\r\n\r\nexport const clearErrorAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: CLEAR_ERROR,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\terror: false,\r\n\t\t\t\tfetching: false,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setPageAction: AppThunk = (page: number) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: SET_CURRENT_PAGE,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tpage,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const setTotalPagesAction: AppThunk = (pages: number) => (\r\n\tdispatch,\r\n\tgetState\r\n) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tdispatch({\r\n\t\ttype: SET_TOTAL_PAGES,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tfetching: false,\r\n\t\t\t\ttotalPages: pages,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n};\r\n\r\nexport const getCollectionAction: AppThunk = () => (dispatch, getState) => {\r\n\tconst { activeFilter } = getState().searcher;\r\n\tconst { filterQuery, page, inputName, inputType } = getState().searcher[\r\n\t\tactiveFilter\r\n\t];\r\n\r\n\tconst query = gql`\r\n\t\t${filterQuery}\r\n\t`;\r\n\r\n\tdispatch({\r\n\t\ttype: GET_COLLECTION_PENDING,\r\n\t\tpayload: {\r\n\t\t\t[activeFilter]: {\r\n\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\tfetching: true,\r\n\t\t\t},\r\n\t\t},\r\n\t});\r\n\r\n\treturn client\r\n\t\t.query({\r\n\t\t\tquery,\r\n\t\t\tvariables: {\r\n\t\t\t\tname: inputName ? inputName.toLowerCase() : \"\",\r\n\t\t\t\ttype: inputType ? inputType.toLowerCase() : \"\",\r\n\t\t\t\tpage: page ? page : 1,\r\n\t\t\t},\r\n\t\t})\r\n\t\t.then(({ data }) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_SUCCESS,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t[activeFilter]: {\r\n\t\t\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\t\t\tfetching: false,\r\n\t\t\t\t\t\tcollection: data[activeFilter!].results,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tdispatch(setTotalPagesAction(data[activeFilter!].info.pages));\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_COLLECTION_ERROR,\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t[activeFilter]: {\r\n\t\t\t\t\t\t...getState().searcher[activeFilter],\r\n\t\t\t\t\t\terror: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t});\r\n};\r\n"]},"metadata":{},"sourceType":"module"}