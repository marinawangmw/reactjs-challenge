{"ast":null,"code":"// STATE TYPES\nexport var Filter;// result data got from api\n(function(Filter){Filter[\"characters\"]=\"characters\";Filter[\"locations\"]=\"locations\";Filter[\"episodes\"]=\"episodes\";})(Filter||(Filter={}));// CONSTANTS\nexport var SET_FILTER=\"SET_FILTER\";export var SET_NAME=\"SET_NAME\";export var SET_TYPE=\"SET_TYPE\";export var CLEAR_INPUT=\"CLEAR_INPUT\";export var CLEAR_COLLECTION=\"CLEAR_COLLECTION\";export var CLEAR_ERROR=\"CLEAR_ERROR\";export var SET_TOTAL_PAGES=\"SET_TOTAL_PAGES\";export var SET_CURRENT_PAGE=\"SET_CURRENT_PAGE\";export var GET_COLLECTION_PENDING=\"GET_COLLECTION_PENDING\";export var GET_COLLECTION_SUCCESS=\"GET_COLLECTION_SUCCESS\";export var GET_COLLECTION_ERROR=\"GET_COLLECTION_ERROR\";// ACTIONS TYPE","map":{"version":3,"sources":["D:/React-Workspace/Puzzle/reactjs-challenge-marina/src/redux/reduxTypes.ts"],"names":["Filter","SET_FILTER","SET_NAME","SET_TYPE","CLEAR_INPUT","CLEAR_COLLECTION","CLEAR_ERROR","SET_TOTAL_PAGES","SET_CURRENT_PAGE","GET_COLLECTION_PENDING","GET_COLLECTION_SUCCESS","GET_COLLECTION_ERROR"],"mappings":"AAIA;AACA,UAAYA,CAAAA,MAAZ,CAMA;UANYA,M,EAAAA,M,4BAAAA,M,0BAAAA,M,2BAAAA,M,GAAAA,M,MAiCZ;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,YAAnB,CACP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,UAAjB,CACP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,UAAjB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,aAApB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,WAAW,CAAG,aAApB,CACP,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,wBAA/B,CACP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,wBAA/B,CACP,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,sBAA7B,CAEP","sourcesContent":["import { Action, ActionCreator } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { RootState } from \"./store\";\r\n\r\n// STATE TYPES\r\nexport enum Filter {\r\n  characters = \"characters\",\r\n  locations = \"locations\",\r\n  episodes = \"episodes\",\r\n}\r\n\r\n// result data got from api\r\nexport interface ResultData {\r\n  id?: number;\r\n  name: string;\r\n  type?: string;\r\n  species?: string;\r\n  gender?: string;\r\n  image?: string;\r\n  dimension?: string;\r\n  episode?: string;\r\n  air_date?: Date;\r\n  residents?: { name: string; image: string }[];\r\n  characters?: { name: string; image: string }[];\r\n}\r\n\r\nexport interface SearcherState {\r\n  filterQuery?: string;\r\n  filter?: Filter;\r\n  collection?: ResultData[];\r\n  inputType?: string;\r\n  inputName?: string;\r\n  fetching?: boolean;\r\n  error?: boolean;\r\n  page?: number;\r\n  totalPages?: number;\r\n}\r\n\r\n// CONSTANTS\r\nexport const SET_FILTER = \"SET_FILTER\";\r\nexport const SET_NAME = \"SET_NAME\";\r\nexport const SET_TYPE = \"SET_TYPE\";\r\nexport const CLEAR_INPUT = \"CLEAR_INPUT\";\r\nexport const CLEAR_COLLECTION = \"CLEAR_COLLECTION\";\r\nexport const CLEAR_ERROR = \"CLEAR_ERROR\";\r\nexport const SET_TOTAL_PAGES = \"SET_TOTAL_PAGES\";\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nexport const GET_COLLECTION_PENDING = \"GET_COLLECTION_PENDING\";\r\nexport const GET_COLLECTION_SUCCESS = \"GET_COLLECTION_SUCCESS\";\r\nexport const GET_COLLECTION_ERROR = \"GET_COLLECTION_ERROR\";\r\n\r\n// ACTIONS TYPE\r\ninterface SetFilterAction {\r\n  type: typeof SET_FILTER;\r\n  payload: { filter: Filter; filterQuery: string };\r\n}\r\n\r\ninterface SetInputAction {\r\n  type: typeof SET_NAME | typeof SET_TYPE;\r\n  payload: string;\r\n}\r\n\r\ninterface ClearStateAction {\r\n  type: typeof CLEAR_INPUT | typeof CLEAR_COLLECTION | typeof CLEAR_ERROR;\r\n}\r\n\r\ninterface PaginatorAction {\r\n  type: typeof SET_TOTAL_PAGES | typeof SET_CURRENT_PAGE;\r\n  payload: number;\r\n}\r\n\r\ninterface GetDataActionSuccess {\r\n  type: typeof GET_COLLECTION_SUCCESS;\r\n  payload: ResultData[];\r\n}\r\n\r\ninterface GetDataActionPendingOrError {\r\n  type: typeof GET_COLLECTION_PENDING | typeof GET_COLLECTION_ERROR;\r\n  payload: boolean;\r\n}\r\n\r\nexport type SearcherActionTypes =\r\n  | SetFilterAction\r\n  | SetInputAction\r\n  | ClearStateAction\r\n  | PaginatorAction\r\n  | GetDataActionSuccess\r\n  | GetDataActionPendingOrError;\r\n\r\nexport type AppThunk = ActionCreator<\r\n  ThunkAction<void, RootState, null, Action<string>>\r\n>;\r\n"]},"metadata":{},"sourceType":"module"}